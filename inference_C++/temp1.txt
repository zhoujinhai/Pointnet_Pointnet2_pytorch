graph(%points : Float(1, 1, 3, 2500),
      %sa1.conv_blocks_0_0.weight : Float(32, 6, 1, 1),
      %sa1.conv_blocks_0_0.bias : Float(32),
      %sa1.bn_blocks_0_0.weight : Float(32),
      %sa1.bn_blocks_0_0.bias : Float(32),
      %sa1.bn_blocks_0_0.running_mean : Float(32),
      %sa1.bn_blocks_0_0.running_var : Float(32),
      %sa1.bn_blocks_0_0.num_batches_tracked : Long(),
      %sa1.conv_blocks_0_1.weight : Float(32, 32, 1, 1),
      %sa1.conv_blocks_0_1.bias : Float(32),
      %sa1.bn_blocks_0_1.weight : Float(32),
      %sa1.bn_blocks_0_1.bias : Float(32),
      %sa1.bn_blocks_0_1.running_mean : Float(32),
      %sa1.bn_blocks_0_1.running_var : Float(32),
      %sa1.bn_blocks_0_1.num_batches_tracked : Long(),
      %sa1.conv_blocks_0_2.weight : Float(64, 32, 1, 1),
      %sa1.conv_blocks_0_2.bias : Float(64),
      %sa1.bn_blocks_0_2.weight : Float(64),
      %sa1.bn_blocks_0_2.bias : Float(64),
      %sa1.bn_blocks_0_2.running_mean : Float(64),
      %sa1.bn_blocks_0_2.running_var : Float(64),
      %sa1.bn_blocks_0_2.num_batches_tracked : Long(),
      %sa1.conv_blocks_1_0.weight : Float(64, 6, 1, 1),
      %sa1.conv_blocks_1_0.bias : Float(64),
      %sa1.bn_blocks_1_0.weight : Float(64),
      %sa1.bn_blocks_1_0.bias : Float(64),
      %sa1.bn_blocks_1_0.running_mean : Float(64),
      %sa1.bn_blocks_1_0.running_var : Float(64),
      %sa1.bn_blocks_1_0.num_batches_tracked : Long(),
      %sa1.conv_blocks_1_1.weight : Float(64, 64, 1, 1),
      %sa1.conv_blocks_1_1.bias : Float(64),
      %sa1.bn_blocks_1_1.weight : Float(64),
      %sa1.bn_blocks_1_1.bias : Float(64),
      %sa1.bn_blocks_1_1.running_mean : Float(64),
      %sa1.bn_blocks_1_1.running_var : Float(64),
      %sa1.bn_blocks_1_1.num_batches_tracked : Long(),
      %sa1.conv_blocks_1_2.weight : Float(128, 64, 1, 1),
      %sa1.conv_blocks_1_2.bias : Float(128),
      %sa1.bn_blocks_1_2.weight : Float(128),
      %sa1.bn_blocks_1_2.bias : Float(128),
      %sa1.bn_blocks_1_2.running_mean : Float(128),
      %sa1.bn_blocks_1_2.running_var : Float(128),
      %sa1.bn_blocks_1_2.num_batches_tracked : Long(),
      %sa1.conv_blocks_2_0.weight : Float(64, 6, 1, 1),
      %sa1.conv_blocks_2_0.bias : Float(64),
      %sa1.bn_blocks_2_0.weight : Float(64),
      %sa1.bn_blocks_2_0.bias : Float(64),
      %sa1.bn_blocks_2_0.running_mean : Float(64),
      %sa1.bn_blocks_2_0.running_var : Float(64),
      %sa1.bn_blocks_2_0.num_batches_tracked : Long(),
      %sa1.conv_blocks_2_1.weight : Float(96, 64, 1, 1),
      %sa1.conv_blocks_2_1.bias : Float(96),
      %sa1.bn_blocks_2_1.weight : Float(96),
      %sa1.bn_blocks_2_1.bias : Float(96),
      %sa1.bn_blocks_2_1.running_mean : Float(96),
      %sa1.bn_blocks_2_1.running_var : Float(96),
      %sa1.bn_blocks_2_1.num_batches_tracked : Long(),
      %sa1.conv_blocks_2_2.weight : Float(128, 96, 1, 1),
      %sa1.conv_blocks_2_2.bias : Float(128),
      %sa1.bn_blocks_2_2.weight : Float(128),
      %sa1.bn_blocks_2_2.bias : Float(128),
      %sa1.bn_blocks_2_2.running_mean : Float(128),
      %sa1.bn_blocks_2_2.running_var : Float(128),
      %sa1.bn_blocks_2_2.num_batches_tracked : Long(),
      %sa2.conv_blocks_0_0.weight : Float(128, 323, 1, 1),
      %sa2.conv_blocks_0_0.bias : Float(128),
      %sa2.bn_blocks_0_0.weight : Float(128),
      %sa2.bn_blocks_0_0.bias : Float(128),
      %sa2.bn_blocks_0_0.running_mean : Float(128),
      %sa2.bn_blocks_0_0.running_var : Float(128),
      %sa2.bn_blocks_0_0.num_batches_tracked : Long(),
      %sa2.conv_blocks_0_1.weight : Float(128, 128, 1, 1),
      %sa2.conv_blocks_0_1.bias : Float(128),
      %sa2.bn_blocks_0_1.weight : Float(128),
      %sa2.bn_blocks_0_1.bias : Float(128),
      %sa2.bn_blocks_0_1.running_mean : Float(128),
      %sa2.bn_blocks_0_1.running_var : Float(128),
      %sa2.bn_blocks_0_1.num_batches_tracked : Long(),
      %sa2.conv_blocks_0_2.weight : Float(256, 128, 1, 1),
      %sa2.conv_blocks_0_2.bias : Float(256),
      %sa2.bn_blocks_0_2.weight : Float(256),
      %sa2.bn_blocks_0_2.bias : Float(256),
      %sa2.bn_blocks_0_2.running_mean : Float(256),
      %sa2.bn_blocks_0_2.running_var : Float(256),
      %sa2.bn_blocks_0_2.num_batches_tracked : Long(),
      %sa2.conv_blocks_1_0.weight : Float(128, 323, 1, 1),
      %sa2.conv_blocks_1_0.bias : Float(128),
      %sa2.bn_blocks_1_0.weight : Float(128),
      %sa2.bn_blocks_1_0.bias : Float(128),
      %sa2.bn_blocks_1_0.running_mean : Float(128),
      %sa2.bn_blocks_1_0.running_var : Float(128),
      %sa2.bn_blocks_1_0.num_batches_tracked : Long(),
      %sa2.conv_blocks_1_1.weight : Float(196, 128, 1, 1),
      %sa2.conv_blocks_1_1.bias : Float(196),
      %sa2.bn_blocks_1_1.weight : Float(196),
      %sa2.bn_blocks_1_1.bias : Float(196),
      %sa2.bn_blocks_1_1.running_mean : Float(196),
      %sa2.bn_blocks_1_1.running_var : Float(196),
      %sa2.bn_blocks_1_1.num_batches_tracked : Long(),
      %sa2.conv_blocks_1_2.weight : Float(256, 196, 1, 1),
      %sa2.conv_blocks_1_2.bias : Float(256),
      %sa2.bn_blocks_1_2.weight : Float(256),
      %sa2.bn_blocks_1_2.bias : Float(256),
      %sa2.bn_blocks_1_2.running_mean : Float(256),
      %sa2.bn_blocks_1_2.running_var : Float(256),
      %sa2.bn_blocks_1_2.num_batches_tracked : Long(),
      %sa3.mlp_convs_0.weight : Float(256, 515, 1, 1),
      %sa3.mlp_convs_0.bias : Float(256),
      %sa3.mlp_bns_0.weight : Float(256),
      %sa3.mlp_bns_0.bias : Float(256),
      %sa3.mlp_bns_0.running_mean : Float(256),
      %sa3.mlp_bns_0.running_var : Float(256),
      %sa3.mlp_bns_0.num_batches_tracked : Long(),
      %sa3.mlp_convs_1.weight : Float(512, 256, 1, 1),
      %sa3.mlp_convs_1.bias : Float(512),
      %sa3.mlp_bns_1.weight : Float(512),
      %sa3.mlp_bns_1.bias : Float(512),
      %sa3.mlp_bns_1.running_mean : Float(512),
      %sa3.mlp_bns_1.running_var : Float(512),
      %sa3.mlp_bns_1.num_batches_tracked : Long(),
      %sa3.mlp_convs_2.weight : Float(1024, 512, 1, 1),
      %sa3.mlp_convs_2.bias : Float(1024),
      %sa3.mlp_bns_2.weight : Float(1024),
      %sa3.mlp_bns_2.bias : Float(1024),
      %sa3.mlp_bns_2.running_mean : Float(1024),
      %sa3.mlp_bns_2.running_var : Float(1024),
      %sa3.mlp_bns_2.num_batches_tracked : Long(),
      %fp3.mlp_convs_0.weight : Float(256, 1536, 1),
      %fp3.mlp_convs_0.bias : Float(256),
      %fp3.mlp_bns_0.weight : Float(256),
      %fp3.mlp_bns_0.bias : Float(256),
      %fp3.mlp_bns_0.running_mean : Float(256),
      %fp3.mlp_bns_0.running_var : Float(256),
      %fp3.mlp_bns_0.num_batches_tracked : Long(),
      %fp3.mlp_convs_1.weight : Float(256, 256, 1),
      %fp3.mlp_convs_1.bias : Float(256),
      %fp3.mlp_bns_1.weight : Float(256),
      %fp3.mlp_bns_1.bias : Float(256),
      %fp3.mlp_bns_1.running_mean : Float(256),
      %fp3.mlp_bns_1.running_var : Float(256),
      %fp3.mlp_bns_1.num_batches_tracked : Long(),
      %fp2.mlp_convs_0.weight : Float(256, 576, 1),
      %fp2.mlp_convs_0.bias : Float(256),
      %fp2.mlp_bns_0.weight : Float(256),
      %fp2.mlp_bns_0.bias : Float(256),
      %fp2.mlp_bns_0.running_mean : Float(256),
      %fp2.mlp_bns_0.running_var : Float(256),
      %fp2.mlp_bns_0.num_batches_tracked : Long(),
      %fp2.mlp_convs_1.weight : Float(128, 256, 1),
      %fp2.mlp_convs_1.bias : Float(128),
      %fp2.mlp_bns_1.weight : Float(128),
      %fp2.mlp_bns_1.bias : Float(128),
      %fp2.mlp_bns_1.running_mean : Float(128),
      %fp2.mlp_bns_1.running_var : Float(128),
      %fp2.mlp_bns_1.num_batches_tracked : Long(),
      %fp1.mlp_convs_0.weight : Float(128, 135, 1),
      %fp1.mlp_convs_0.bias : Float(128),
      %fp1.mlp_bns_0.weight : Float(128),
      %fp1.mlp_bns_0.bias : Float(128),
      %fp1.mlp_bns_0.running_mean : Float(128),
      %fp1.mlp_bns_0.running_var : Float(128),
      %fp1.mlp_bns_0.num_batches_tracked : Long(),
      %fp1.mlp_convs_1.weight : Float(128, 128, 1),
      %fp1.mlp_convs_1.bias : Float(128),
      %fp1.mlp_bns_1.weight : Float(128),
      %fp1.mlp_bns_1.bias : Float(128),
      %fp1.mlp_bns_1.running_mean : Float(128),
      %fp1.mlp_bns_1.running_var : Float(128),
      %fp1.mlp_bns_1.num_batches_tracked : Long(),
      %conv1.weight : Float(128, 128, 1),
      %conv1.bias : Float(128),
      %bn1.weight : Float(128),
      %bn1.bias : Float(128),
      %bn1.running_mean : Float(128),
      %bn1.running_var : Float(128),
      %bn1.num_batches_tracked : Long(),
      %conv2.weight : Float(2, 128, 1),
      %conv2.bias : Float(2)):
  %178 : Float(1, 3, 2500) = onnx::Squeeze[axes=[0]](%points) # E:/code/Server223/pointNet/inference_C++/testFunction.py:598:0
  %179 : Float(1, 2500, 3) = onnx::Transpose[perm=[0, 2, 1]](%178) # E:/code/Server223/pointNet/inference_C++/testFunction.py:253:0
  %180 : Float(1, 2500, 3) = onnx::Transpose[perm=[0, 2, 1]](%178) # E:/code/Server223/pointNet/inference_C++/testFunction.py:254:0
  %181 : Long() = onnx::Constant[value={1024}]()
  %182 : Long(1, 1024) = my_ops::fps(%179, %181) # E:/code/Server223/pointNet/inference_C++/testFunction.py:261:0
  %183 : Long() = onnx::Constant[value={3}]()
  %184 : Float(1, 1, 1024, 3) = my_ops::idx_pts(%179, %182, %183) # E:/code/Server223/pointNet/inference_C++/testFunction.py:261:0
  %185 : Float(1, 1024, 3) = onnx::Squeeze[axes=[0]](%184) # E:/code/Server223/pointNet/inference_C++/testFunction.py:261:0
  %186 : Float() = onnx::Constant[value={0.1}]() # E:/code/Server223/pointNet/inference_C++/testFunction.py:266:0
  %187 : Long() = onnx::Constant[value={32}]()
  %188 : Long(1, 1, 1024, 32) = my_ops::query_ball_pts(%186, %187, %179, %185) # E:/code/Server223/pointNet/inference_C++/testFunction.py:266:0
  %189 : Long(1, 1024, 32) = onnx::Squeeze[axes=[0]](%188) # E:/code/Server223/pointNet/inference_C++/testFunction.py:266:0
  %190 : Long() = onnx::Constant[value={3}]()
  %191 : Float(1, 1, 1024, 32, 3) = my_ops::idx_pts(%179, %189, %190) # E:/code/Server223/pointNet/inference_C++/testFunction.py:268:0
  %192 : Float(1, 1024, 32, 3) = onnx::Squeeze[axes=[0]](%191) # E:/code/Server223/pointNet/inference_C++/testFunction.py:268:0
  %193 : Float(1, 1024, 32, 3) = my_ops::sub_center(%192, %185) # E:/code/Server223/pointNet/inference_C++/testFunction.py:270:0
  %194 : Long() = onnx::Constant[value={3}]()
  %195 : Float(1, 1, 1024, 32, 3) = my_ops::idx_pts(%180, %189, %194) # E:/code/Server223/pointNet/inference_C++/testFunction.py:272:0
  %196 : Float(1, 1024, 32, 3) = onnx::Squeeze[axes=[0]](%195) # E:/code/Server223/pointNet/inference_C++/testFunction.py:272:0
  %197 : Float(1, 1024, 32, 6) = onnx::Concat[axis=-1](%196, %193) # E:/code/Server223/pointNet/inference_C++/testFunction.py:273:0
  %198 : Float(1, 6, 32, 1024) = onnx::Transpose[perm=[0, 3, 2, 1]](%197) # E:/code/Server223/pointNet/inference_C++/testFunction.py:275:0
  %199 : Float(1, 32, 32, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%198, %sa1.conv_blocks_0_0.weight, %sa1.conv_blocks_0_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %200 : Float(1, 32, 32, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%199, %sa1.bn_blocks_0_0.weight, %sa1.bn_blocks_0_0.bias, %sa1.bn_blocks_0_0.running_mean, %sa1.bn_blocks_0_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %201 : Float(1, 32, 32, 1024) = onnx::Relu(%200) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %202 : Float(1, 32, 32, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%201, %sa1.conv_blocks_0_1.weight, %sa1.conv_blocks_0_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %203 : Float(1, 32, 32, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%202, %sa1.bn_blocks_0_1.weight, %sa1.bn_blocks_0_1.bias, %sa1.bn_blocks_0_1.running_mean, %sa1.bn_blocks_0_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %204 : Float(1, 32, 32, 1024) = onnx::Relu(%203) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %205 : Float(1, 64, 32, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%204, %sa1.conv_blocks_0_2.weight, %sa1.conv_blocks_0_2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %206 : Float(1, 64, 32, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%205, %sa1.bn_blocks_0_2.weight, %sa1.bn_blocks_0_2.bias, %sa1.bn_blocks_0_2.running_mean, %sa1.bn_blocks_0_2.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %207 : Float(1, 64, 32, 1024) = onnx::Relu(%206) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %208 : Float(1, 64, 1024) = onnx::ReduceMax[axes=[2], keepdims=0](%207) # E:/code/Server223/pointNet/inference_C++/testFunction.py:279:0
  %209 : Float() = onnx::Constant[value={0.2}]() # E:/code/Server223/pointNet/inference_C++/testFunction.py:283:0
  %210 : Long() = onnx::Constant[value={64}]()
  %211 : Long(1, 1, 1024, 64) = my_ops::query_ball_pts(%209, %210, %179, %185) # E:/code/Server223/pointNet/inference_C++/testFunction.py:283:0
  %212 : Long(1, 1024, 64) = onnx::Squeeze[axes=[0]](%211) # E:/code/Server223/pointNet/inference_C++/testFunction.py:283:0
  %213 : Long() = onnx::Constant[value={3}]()
  %214 : Float(1, 1, 1024, 64, 3) = my_ops::idx_pts(%179, %212, %213) # E:/code/Server223/pointNet/inference_C++/testFunction.py:285:0
  %215 : Float(1, 1024, 64, 3) = onnx::Squeeze[axes=[0]](%214) # E:/code/Server223/pointNet/inference_C++/testFunction.py:285:0
  %216 : Float(1, 1024, 64, 3) = my_ops::sub_center(%215, %185) # E:/code/Server223/pointNet/inference_C++/testFunction.py:286:0
  %217 : Long() = onnx::Constant[value={3}]()
  %218 : Float(1, 1, 1024, 64, 3) = my_ops::idx_pts(%180, %212, %217) # E:/code/Server223/pointNet/inference_C++/testFunction.py:288:0
  %219 : Float(1, 1024, 64, 3) = onnx::Squeeze[axes=[0]](%218) # E:/code/Server223/pointNet/inference_C++/testFunction.py:288:0
  %220 : Float(1, 1024, 64, 6) = onnx::Concat[axis=-1](%219, %216) # E:/code/Server223/pointNet/inference_C++/testFunction.py:289:0
  %221 : Float(1, 6, 64, 1024) = onnx::Transpose[perm=[0, 3, 2, 1]](%220) # E:/code/Server223/pointNet/inference_C++/testFunction.py:291:0
  %222 : Float(1, 64, 64, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%221, %sa1.conv_blocks_1_0.weight, %sa1.conv_blocks_1_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %223 : Float(1, 64, 64, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%222, %sa1.bn_blocks_1_0.weight, %sa1.bn_blocks_1_0.bias, %sa1.bn_blocks_1_0.running_mean, %sa1.bn_blocks_1_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %224 : Float(1, 64, 64, 1024) = onnx::Relu(%223) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %225 : Float(1, 64, 64, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%224, %sa1.conv_blocks_1_1.weight, %sa1.conv_blocks_1_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %226 : Float(1, 64, 64, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%225, %sa1.bn_blocks_1_1.weight, %sa1.bn_blocks_1_1.bias, %sa1.bn_blocks_1_1.running_mean, %sa1.bn_blocks_1_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %227 : Float(1, 64, 64, 1024) = onnx::Relu(%226) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %228 : Float(1, 128, 64, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%227, %sa1.conv_blocks_1_2.weight, %sa1.conv_blocks_1_2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %229 : Float(1, 128, 64, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%228, %sa1.bn_blocks_1_2.weight, %sa1.bn_blocks_1_2.bias, %sa1.bn_blocks_1_2.running_mean, %sa1.bn_blocks_1_2.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %230 : Float(1, 128, 64, 1024) = onnx::Relu(%229) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %231 : Float(1, 128, 1024) = onnx::ReduceMax[axes=[2], keepdims=0](%230) # E:/code/Server223/pointNet/inference_C++/testFunction.py:295:0
  %232 : Float() = onnx::Constant[value={0.4}]() # E:/code/Server223/pointNet/inference_C++/testFunction.py:299:0
  %233 : Long() = onnx::Constant[value={128}]()
  %234 : Long(1, 1, 1024, 128) = my_ops::query_ball_pts(%232, %233, %179, %185) # E:/code/Server223/pointNet/inference_C++/testFunction.py:299:0
  %235 : Long(1, 1024, 128) = onnx::Squeeze[axes=[0]](%234) # E:/code/Server223/pointNet/inference_C++/testFunction.py:299:0
  %236 : Long() = onnx::Constant[value={3}]()
  %237 : Float(1, 1, 1024, 128, 3) = my_ops::idx_pts(%179, %235, %236) # E:/code/Server223/pointNet/inference_C++/testFunction.py:301:0
  %238 : Float(1, 1024, 128, 3) = onnx::Squeeze[axes=[0]](%237) # E:/code/Server223/pointNet/inference_C++/testFunction.py:301:0
  %239 : Float(1, 1024, 128, 3) = my_ops::sub_center(%238, %185) # E:/code/Server223/pointNet/inference_C++/testFunction.py:302:0
  %240 : Long() = onnx::Constant[value={3}]()
  %241 : Float(1, 1, 1024, 128, 3) = my_ops::idx_pts(%180, %235, %240) # E:/code/Server223/pointNet/inference_C++/testFunction.py:304:0
  %242 : Float(1, 1024, 128, 3) = onnx::Squeeze[axes=[0]](%241) # E:/code/Server223/pointNet/inference_C++/testFunction.py:304:0
  %243 : Float(1, 1024, 128, 6) = onnx::Concat[axis=-1](%242, %239) # E:/code/Server223/pointNet/inference_C++/testFunction.py:305:0
  %244 : Float(1, 6, 128, 1024) = onnx::Transpose[perm=[0, 3, 2, 1]](%243) # E:/code/Server223/pointNet/inference_C++/testFunction.py:307:0
  %245 : Float(1, 64, 128, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%244, %sa1.conv_blocks_2_0.weight, %sa1.conv_blocks_2_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %246 : Float(1, 64, 128, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%245, %sa1.bn_blocks_2_0.weight, %sa1.bn_blocks_2_0.bias, %sa1.bn_blocks_2_0.running_mean, %sa1.bn_blocks_2_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %247 : Float(1, 64, 128, 1024) = onnx::Relu(%246) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %248 : Float(1, 96, 128, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%247, %sa1.conv_blocks_2_1.weight, %sa1.conv_blocks_2_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %249 : Float(1, 96, 128, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%248, %sa1.bn_blocks_2_1.weight, %sa1.bn_blocks_2_1.bias, %sa1.bn_blocks_2_1.running_mean, %sa1.bn_blocks_2_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %250 : Float(1, 96, 128, 1024) = onnx::Relu(%249) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %251 : Float(1, 128, 128, 1024) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%250, %sa1.conv_blocks_2_2.weight, %sa1.conv_blocks_2_2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %252 : Float(1, 128, 128, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%251, %sa1.bn_blocks_2_2.weight, %sa1.bn_blocks_2_2.bias, %sa1.bn_blocks_2_2.running_mean, %sa1.bn_blocks_2_2.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %253 : Float(1, 128, 128, 1024) = onnx::Relu(%252) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %254 : Float(1, 128, 1024) = onnx::ReduceMax[axes=[2], keepdims=0](%253) # E:/code/Server223/pointNet/inference_C++/testFunction.py:311:0
  %255 : Float(1, 320, 1024) = onnx::Concat[axis=1](%208, %231, %254) # E:/code/Server223/pointNet/inference_C++/testFunction.py:315:0
  %256 : Float(1, 1024, 320) = onnx::Transpose[perm=[0, 2, 1]](%255) # E:/code/Server223/pointNet/inference_C++/testFunction.py:354:0
  %257 : Long() = onnx::Constant[value={256}]()
  %258 : Long(1, 256) = my_ops::fps(%185, %257) # E:/code/Server223/pointNet/inference_C++/testFunction.py:360:0
  %259 : Long() = onnx::Constant[value={3}]()
  %260 : Float(1, 1, 256, 3) = my_ops::idx_pts(%185, %258, %259) # E:/code/Server223/pointNet/inference_C++/testFunction.py:360:0
  %261 : Float(1, 256, 3) = onnx::Squeeze[axes=[0]](%260) # E:/code/Server223/pointNet/inference_C++/testFunction.py:360:0
  %262 : Float() = onnx::Constant[value={0.4}]() # E:/code/Server223/pointNet/inference_C++/testFunction.py:364:0
  %263 : Long() = onnx::Constant[value={64}]()
  %264 : Long(1, 1, 256, 64) = my_ops::query_ball_pts(%262, %263, %185, %261) # E:/code/Server223/pointNet/inference_C++/testFunction.py:364:0
  %265 : Long(1, 256, 64) = onnx::Squeeze[axes=[0]](%264) # E:/code/Server223/pointNet/inference_C++/testFunction.py:364:0
  %266 : Long() = onnx::Constant[value={3}]()
  %267 : Float(1, 1, 256, 64, 3) = my_ops::idx_pts(%185, %265, %266) # E:/code/Server223/pointNet/inference_C++/testFunction.py:366:0
  %268 : Float(1, 256, 64, 3) = onnx::Squeeze[axes=[0]](%267) # E:/code/Server223/pointNet/inference_C++/testFunction.py:366:0
  %269 : Float(1, 256, 64, 3) = my_ops::sub_center(%268, %261) # E:/code/Server223/pointNet/inference_C++/testFunction.py:368:0
  %270 : Long() = onnx::Constant[value={320}]()
  %271 : Float(1, 1, 256, 64, 320) = my_ops::idx_pts(%256, %265, %270) # E:/code/Server223/pointNet/inference_C++/testFunction.py:370:0
  %272 : Float(1, 256, 64, 320) = onnx::Squeeze[axes=[0]](%271) # E:/code/Server223/pointNet/inference_C++/testFunction.py:370:0
  %273 : Float(1, 256, 64, 323) = onnx::Concat[axis=-1](%272, %269) # E:/code/Server223/pointNet/inference_C++/testFunction.py:371:0
  %274 : Float(1, 323, 64, 256) = onnx::Transpose[perm=[0, 3, 2, 1]](%273) # E:/code/Server223/pointNet/inference_C++/testFunction.py:373:0
  %275 : Float(1, 128, 64, 256) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%274, %sa2.conv_blocks_0_0.weight, %sa2.conv_blocks_0_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %276 : Float(1, 128, 64, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%275, %sa2.bn_blocks_0_0.weight, %sa2.bn_blocks_0_0.bias, %sa2.bn_blocks_0_0.running_mean, %sa2.bn_blocks_0_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %277 : Float(1, 128, 64, 256) = onnx::Relu(%276) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %278 : Float(1, 128, 64, 256) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%277, %sa2.conv_blocks_0_1.weight, %sa2.conv_blocks_0_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %279 : Float(1, 128, 64, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%278, %sa2.bn_blocks_0_1.weight, %sa2.bn_blocks_0_1.bias, %sa2.bn_blocks_0_1.running_mean, %sa2.bn_blocks_0_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %280 : Float(1, 128, 64, 256) = onnx::Relu(%279) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %281 : Float(1, 256, 64, 256) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%280, %sa2.conv_blocks_0_2.weight, %sa2.conv_blocks_0_2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %282 : Float(1, 256, 64, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%281, %sa2.bn_blocks_0_2.weight, %sa2.bn_blocks_0_2.bias, %sa2.bn_blocks_0_2.running_mean, %sa2.bn_blocks_0_2.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %283 : Float(1, 256, 64, 256) = onnx::Relu(%282) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %284 : Float(1, 256, 256) = onnx::ReduceMax[axes=[2], keepdims=0](%283) # E:/code/Server223/pointNet/inference_C++/testFunction.py:377:0
  %285 : Float() = onnx::Constant[value={0.8}]() # E:/code/Server223/pointNet/inference_C++/testFunction.py:381:0
  %286 : Long() = onnx::Constant[value={128}]()
  %287 : Long(1, 1, 256, 128) = my_ops::query_ball_pts(%285, %286, %185, %261) # E:/code/Server223/pointNet/inference_C++/testFunction.py:381:0
  %288 : Long(1, 256, 128) = onnx::Squeeze[axes=[0]](%287) # E:/code/Server223/pointNet/inference_C++/testFunction.py:381:0
  %289 : Long() = onnx::Constant[value={3}]()
  %290 : Float(1, 1, 256, 128, 3) = my_ops::idx_pts(%185, %288, %289) # E:/code/Server223/pointNet/inference_C++/testFunction.py:383:0
  %291 : Float(1, 256, 128, 3) = onnx::Squeeze[axes=[0]](%290) # E:/code/Server223/pointNet/inference_C++/testFunction.py:383:0
  %292 : Float(1, 256, 128, 3) = my_ops::sub_center(%291, %261) # E:/code/Server223/pointNet/inference_C++/testFunction.py:385:0
  %293 : Long() = onnx::Constant[value={320}]()
  %294 : Float(1, 1, 256, 128, 320) = my_ops::idx_pts(%256, %288, %293) # E:/code/Server223/pointNet/inference_C++/testFunction.py:387:0
  %295 : Float(1, 256, 128, 320) = onnx::Squeeze[axes=[0]](%294) # E:/code/Server223/pointNet/inference_C++/testFunction.py:387:0
  %296 : Float(1, 256, 128, 323) = onnx::Concat[axis=-1](%295, %292) # E:/code/Server223/pointNet/inference_C++/testFunction.py:388:0
  %297 : Float(1, 323, 128, 256) = onnx::Transpose[perm=[0, 3, 2, 1]](%296) # E:/code/Server223/pointNet/inference_C++/testFunction.py:390:0
  %298 : Float(1, 128, 128, 256) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%297, %sa2.conv_blocks_1_0.weight, %sa2.conv_blocks_1_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %299 : Float(1, 128, 128, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%298, %sa2.bn_blocks_1_0.weight, %sa2.bn_blocks_1_0.bias, %sa2.bn_blocks_1_0.running_mean, %sa2.bn_blocks_1_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %300 : Float(1, 128, 128, 256) = onnx::Relu(%299) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %301 : Float(1, 196, 128, 256) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%300, %sa2.conv_blocks_1_1.weight, %sa2.conv_blocks_1_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %302 : Float(1, 196, 128, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%301, %sa2.bn_blocks_1_1.weight, %sa2.bn_blocks_1_1.bias, %sa2.bn_blocks_1_1.running_mean, %sa2.bn_blocks_1_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %303 : Float(1, 196, 128, 256) = onnx::Relu(%302) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %304 : Float(1, 256, 128, 256) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%303, %sa2.conv_blocks_1_2.weight, %sa2.conv_blocks_1_2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %305 : Float(1, 256, 128, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%304, %sa2.bn_blocks_1_2.weight, %sa2.bn_blocks_1_2.bias, %sa2.bn_blocks_1_2.running_mean, %sa2.bn_blocks_1_2.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %306 : Float(1, 256, 128, 256) = onnx::Relu(%305) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %307 : Float(1, 256, 256) = onnx::ReduceMax[axes=[2], keepdims=0](%306) # E:/code/Server223/pointNet/inference_C++/testFunction.py:394:0
  %308 : Float(1, 512, 256) = onnx::Concat[axis=1](%284, %307) # E:/code/Server223/pointNet/inference_C++/testFunction.py:398:0
  %309 : Float(1, 256, 512) = onnx::Transpose[perm=[0, 2, 1]](%308) # E:/code/Server223/pointNet/inference_C++/testFunction.py:426:0
  %310 : Tensor = onnx::Shape(%261)
  %311 : Tensor = onnx::Constant[value={2}]()
  %312 : Long() = onnx::Gather[axis=0](%310, %311) # E:/code/Server223/pointNet/inference_C++/testFunction.py:191:0
  %313 : Tensor = onnx::Shape(%309)
  %314 : Tensor = onnx::Constant[value={0}]()
  %315 : Long() = onnx::Gather[axis=0](%313, %314) # E:/code/Server223/pointNet/inference_C++/testFunction.py:192:0
  %316 : Tensor = onnx::Shape(%309)
  %317 : Tensor = onnx::Constant[value={1}]()
  %318 : Long() = onnx::Gather[axis=0](%316, %317) # E:/code/Server223/pointNet/inference_C++/testFunction.py:192:0
  %319 : Tensor = onnx::Shape(%309)
  %320 : Tensor = onnx::Constant[value={2}]()
  %321 : Long() = onnx::Gather[axis=0](%319, %320) # E:/code/Server223/pointNet/inference_C++/testFunction.py:192:0
  %322 : Long() = onnx::Constant[value={1}]()
  %323 : Tensor = onnx::Unsqueeze[axes=[0]](%315)
  %324 : Tensor = onnx::Unsqueeze[axes=[0]](%322)
  %325 : Tensor = onnx::Unsqueeze[axes=[0]](%318)
  %326 : Tensor = onnx::Unsqueeze[axes=[0]](%312)
  %327 : Tensor = onnx::Concat[axis=0](%323, %324, %325, %326)
  %328 : Float(1, 1, 256, 3) = onnx::Reshape(%261, %327) # E:/code/Server223/pointNet/inference_C++/testFunction.py:195:0
  %329 : Long() = onnx::Constant[value={1}]()
  %330 : Tensor = onnx::Unsqueeze[axes=[0]](%315)
  %331 : Tensor = onnx::Unsqueeze[axes=[0]](%329)
  %332 : Tensor = onnx::Unsqueeze[axes=[0]](%318)
  %333 : Tensor = onnx::Unsqueeze[axes=[0]](%321)
  %334 : Tensor = onnx::Concat[axis=0](%330, %331, %332, %333)
  %335 : Float(1, 1, 256, 512) = onnx::Reshape(%309, %334) # E:/code/Server223/pointNet/inference_C++/testFunction.py:196:0
  %336 : Float(1, 1, 256, 515) = onnx::Concat[axis=-1](%328, %335) # E:/code/Server223/pointNet/inference_C++/testFunction.py:196:0
  %337 : Float(1, 515, 256, 1) = onnx::Transpose[perm=[0, 3, 2, 1]](%336) # E:/code/Server223/pointNet/inference_C++/testFunction.py:432:0
  %338 : Float(1, 256, 256, 1) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%337, %sa3.mlp_convs_0.weight, %sa3.mlp_convs_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %339 : Float(1, 256, 256, 1) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%338, %sa3.mlp_bns_0.weight, %sa3.mlp_bns_0.bias, %sa3.mlp_bns_0.running_mean, %sa3.mlp_bns_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %340 : Float(1, 256, 256, 1) = onnx::Relu(%339) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %341 : Float(1, 512, 256, 1) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%340, %sa3.mlp_convs_1.weight, %sa3.mlp_convs_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %342 : Float(1, 512, 256, 1) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%341, %sa3.mlp_bns_1.weight, %sa3.mlp_bns_1.bias, %sa3.mlp_bns_1.running_mean, %sa3.mlp_bns_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %343 : Float(1, 512, 256, 1) = onnx::Relu(%342) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %344 : Float(1, 1024, 256, 1) = onnx::Conv[dilations=[1, 1], group=1, kernel_shape=[1, 1], pads=[0, 0, 0, 0], strides=[1, 1]](%343, %sa3.mlp_convs_2.weight, %sa3.mlp_convs_2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:346:0
  %345 : Float(1, 1024, 256, 1) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%344, %sa3.mlp_bns_2.weight, %sa3.mlp_bns_2.bias, %sa3.mlp_bns_2.running_mean, %sa3.mlp_bns_2.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %346 : Float(1, 1024, 256, 1) = onnx::Relu(%345) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %347 : Float(1, 1024, 1) = onnx::ReduceMax[axes=[2], keepdims=0](%346) # E:/code/Server223/pointNet/inference_C++/testFunction.py:438:0
  %348 : Float(1, 1, 1024) = onnx::Transpose[perm=[0, 2, 1]](%347) # E:/code/Server223/pointNet/inference_C++/testFunction.py:464:0
  %349 : Tensor = onnx::Shape(%261)
  %350 : Tensor = onnx::Constant[value={1}]()
  %351 : Long() = onnx::Gather[axis=0](%349, %350) # E:/code/Server223/pointNet/inference_C++/testFunction.py:465:0
  %352 : Long() = onnx::Constant[value={1}]()
  %353 : Long() = onnx::Constant[value={1}]()
  %354 : Tensor = onnx::Unsqueeze[axes=[0]](%352)
  %355 : Tensor = onnx::Unsqueeze[axes=[0]](%351)
  %356 : Tensor = onnx::Unsqueeze[axes=[0]](%353)
  %357 : Tensor = onnx::Concat[axis=0](%354, %355, %356)
  %358 : Float(1, 256, 1024) = onnx::Tile(%348, %357) # E:/code/Server223/pointNet/inference_C++/testFunction.py:469:0
  %359 : Float(1, 256, 512) = onnx::Transpose[perm=[0, 2, 1]](%308) # E:/code/Server223/pointNet/inference_C++/testFunction.py:471:0
  %360 : Float(1, 256, 1536) = onnx::Concat[axis=-1](%359, %358) # E:/code/Server223/pointNet/inference_C++/testFunction.py:472:0
  %361 : Float(1, 1536, 256) = onnx::Transpose[perm=[0, 2, 1]](%360) # E:/code/Server223/pointNet/inference_C++/testFunction.py:474:0
  %362 : Float(1, 256, 256) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%361, %fp3.mlp_convs_0.weight, %fp3.mlp_convs_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %363 : Float(1, 256, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%362, %fp3.mlp_bns_0.weight, %fp3.mlp_bns_0.bias, %fp3.mlp_bns_0.running_mean, %fp3.mlp_bns_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %364 : Float(1, 256, 256) = onnx::Relu(%363) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %365 : Float(1, 256, 256) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%364, %fp3.mlp_convs_1.weight, %fp3.mlp_convs_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %366 : Float(1, 256, 256) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%365, %fp3.mlp_bns_1.weight, %fp3.mlp_bns_1.bias, %fp3.mlp_bns_1.running_mean, %fp3.mlp_bns_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %367 : Float(1, 256, 256) = onnx::Relu(%366) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %368 : Float(1, 256, 256) = onnx::Transpose[perm=[0, 2, 1]](%367) # E:/code/Server223/pointNet/inference_C++/testFunction.py:510:0
  %369 : Float(1, 1, 1024, 576) = my_ops::propagatedata(%185, %261, %255, %368) # E:/code/Server223/pointNet/inference_C++/testFunction.py:538:0
  %370 : Float(1, 1024, 576) = onnx::Squeeze[axes=[0]](%369) # E:/code/Server223/pointNet/inference_C++/testFunction.py:538:0
  %371 : Float(1, 576, 1024) = onnx::Transpose[perm=[0, 2, 1]](%370) # E:/code/Server223/pointNet/inference_C++/testFunction.py:540:0
  %372 : Float(1, 256, 1024) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%371, %fp2.mlp_convs_0.weight, %fp2.mlp_convs_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %373 : Float(1, 256, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%372, %fp2.mlp_bns_0.weight, %fp2.mlp_bns_0.bias, %fp2.mlp_bns_0.running_mean, %fp2.mlp_bns_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %374 : Float(1, 256, 1024) = onnx::Relu(%373) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %375 : Float(1, 128, 1024) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%374, %fp2.mlp_convs_1.weight, %fp2.mlp_convs_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %376 : Float(1, 128, 1024) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%375, %fp2.mlp_bns_1.weight, %fp2.mlp_bns_1.bias, %fp2.mlp_bns_1.running_mean, %fp2.mlp_bns_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %377 : Float(1, 128, 1024) = onnx::Relu(%376) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %378 : Long() = onnx::Constant[value={1}]()
  %379 : Long() = onnx::Constant[value={3}]()
  %380 : Float(1, 1, 7, 2500) = my_ops::get_cate(%178, %178, %378, %379) # E:/code/Server223/pointNet/inference_C++/testFunction.py:612:0
  %381 : Float(1, 7, 2500) = onnx::Squeeze[axes=[0]](%380) # E:/code/Server223/pointNet/inference_C++/testFunction.py:612:0
  %382 : Float(1, 2500, 3) = onnx::Transpose[perm=[0, 2, 1]](%178) # E:/code/Server223/pointNet/inference_C++/testFunction.py:507:0
  %383 : Float(1, 1024, 128) = onnx::Transpose[perm=[0, 2, 1]](%377) # E:/code/Server223/pointNet/inference_C++/testFunction.py:510:0
  %384 : Float(1, 1, 2500, 135) = my_ops::propagatedata(%382, %185, %381, %383) # E:/code/Server223/pointNet/inference_C++/testFunction.py:538:0
  %385 : Float(1, 2500, 135) = onnx::Squeeze[axes=[0]](%384) # E:/code/Server223/pointNet/inference_C++/testFunction.py:538:0
  %386 : Float(1, 135, 2500) = onnx::Transpose[perm=[0, 2, 1]](%385) # E:/code/Server223/pointNet/inference_C++/testFunction.py:540:0
  %387 : Float(1, 128, 2500) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%386, %fp1.mlp_convs_0.weight, %fp1.mlp_convs_0.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %388 : Float(1, 128, 2500) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%387, %fp1.mlp_bns_0.weight, %fp1.mlp_bns_0.bias, %fp1.mlp_bns_0.running_mean, %fp1.mlp_bns_0.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %389 : Float(1, 128, 2500) = onnx::Relu(%388) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %390 : Float(1, 128, 2500) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%389, %fp1.mlp_convs_1.weight, %fp1.mlp_convs_1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %391 : Float(1, 128, 2500) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%390, %fp1.mlp_bns_1.weight, %fp1.mlp_bns_1.bias, %fp1.mlp_bns_1.running_mean, %fp1.mlp_bns_1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %392 : Float(1, 128, 2500) = onnx::Relu(%391) # D:\python\lib\site-packages\torch\nn\functional.py:1063:0
  %393 : Float(1, 128, 2500) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%392, %conv1.weight, %conv1.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %394 : Float(1, 128, 2500) = onnx::BatchNormalization[epsilon=1.0000000000000001e-05, momentum=0.90000000000000002](%393, %bn1.weight, %bn1.bias, %bn1.running_mean, %bn1.running_var) # D:\python\lib\site-packages\torch\nn\functional.py:1923:0
  %395 : Float(1, 128, 2500) = onnx::Relu(%394) # D:\python\lib\site-packages\torch\nn\functional.py:936:0
  %396 : Float(1, 2, 2500) = onnx::Conv[dilations=[1], group=1, kernel_shape=[1], pads=[0, 0], strides=[1]](%395, %conv2.weight, %conv2.bias) # D:\python\lib\site-packages\torch\nn\modules\conv.py:208:0
  %397 : Tensor = onnx::Transpose[perm=[0, 2, 1]](%396)
  %res : Float(1, 2500, 2) = onnx::LogSoftmax[axis=2](%397)
  return (%res)